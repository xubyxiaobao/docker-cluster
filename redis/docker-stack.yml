version: '3.8'
services:
  redis1:
    image: ${REGISTRY}${redis_image}
    logging:
      driver: "json-file"
      options:
        max-size: ${CONTAINER_LOG_SIZE}
        max-file: ${CONTAINER_LOG_NUMS}
    ports:
      - target: "${redis_master_out_port}"
        published: "${redis_master_out_port}"
        protocol: tcp
        mode: host
      - target: "1${redis_master_out_port}"
        published: "1${redis_master_out_port}"
        protocol: tcp
        mode: host
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.labels.nodename==${NODE1_TAG}
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    environment:
      TZ: "Asia/Shanghai"
      PORT: "${redis_master_out_port}"
      PASSWORD: ${redis_password}
      ANNOUNCE_IP: ${NODE1_IP}
      ANNOUNCE_PORT: "${redis_master_out_port}"
      ANNOUNCE_BUS_PORT: "1${redis_master_out_port}"
    volumes:
      - redis1-volume:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      ddc_network:
        aliases:
          - redis1
  redis2:
    image: ${REGISTRY}${redis_image}
    logging:
      driver: "json-file"
      options:
        max-size: ${CONTAINER_LOG_SIZE}
        max-file: ${CONTAINER_LOG_NUMS}
    ports:
      - target: "${redis_master_out_port}"
        published: "${redis_master_out_port}"
        protocol: tcp
        mode: host
      - target: "1${redis_master_out_port}"
        published: "1${redis_master_out_port}"
        protocol: tcp
        mode: host
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.labels.nodename==${NODE2_TAG}
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    environment:
      TZ: "Asia/Shanghai"
      PORT: "${redis_master_out_port}"
      PASSWORD: ${redis_password}
      ANNOUNCE_IP: ${NODE2_IP}
      ANNOUNCE_PORT: "${redis_master_out_port}"
      ANNOUNCE_BUS_PORT: "1${redis_master_out_port}"
    volumes:
      - redis2-volume:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      ddc_network:
        aliases:
          - redis2
  redis3:
    image: ${REGISTRY}${redis_image}
    logging:
      driver: "json-file"
      options:
        max-size: ${CONTAINER_LOG_SIZE}
        max-file: ${CONTAINER_LOG_NUMS}
    ports:
      - target: "${redis_master_out_port}"
        published: "${redis_master_out_port}"
        protocol: tcp
        mode: host
      - target: "1${redis_master_out_port}"
        published: "1${redis_master_out_port}"
        protocol: tcp
        mode: host
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.labels.nodename==${NODE3_TAG}
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    environment:
      TZ: "Asia/Shanghai"
      PORT: "${redis_master_out_port}"
      PASSWORD: ${redis_password}
      ANNOUNCE_IP: ${NODE3_IP}
      ANNOUNCE_PORT: "${redis_master_out_port}"
      ANNOUNCE_BUS_PORT: "1${redis_master_out_port}"
    volumes:
      - redis3-volume:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      ddc_network:
        aliases:
          - redis3
  redis4:
    image: ${REGISTRY}${redis_image}
    logging:
      driver: "json-file"
      options:
        max-size: ${CONTAINER_LOG_SIZE}
        max-file: ${CONTAINER_LOG_NUMS}
    ports:
      - target: "${redis_slave_out_port}"
        published: "${redis_slave_out_port}"
        protocol: tcp
        mode: host
      - target: "1${redis_slave_out_port}"
        published: "1${redis_slave_out_port}"
        protocol: tcp
        mode: host
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.labels.nodename==${NODE1_TAG}
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    environment:
      TZ: "Asia/Shanghai"
      PORT: "${redis_slave_out_port}"
      PASSWORD: ${redis_password}
      ANNOUNCE_IP: ${NODE1_IP}
      ANNOUNCE_PORT: "${redis_slave_out_port}"
      ANNOUNCE_BUS_PORT: "1${redis_slave_out_port}"
    volumes:
      - redis4-volume:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      ddc_network:
        aliases:
          - redis4
  redis5:
    image: ${REGISTRY}${redis_image}
    logging:
      driver: "json-file"
      options:
        max-size: ${CONTAINER_LOG_SIZE}
        max-file: ${CONTAINER_LOG_NUMS}
    ports:
      - target: "${redis_slave_out_port}"
        published: "${redis_slave_out_port}"
        protocol: tcp
        mode: host
      - target: "1${redis_slave_out_port}"
        published: "1${redis_slave_out_port}"
        protocol: tcp
        mode: host
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.labels.nodename==${NODE2_TAG}
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    environment:
      TZ: "Asia/Shanghai"
      PORT: "${redis_slave_out_port}"
      PASSWORD: ${redis_password}
      ANNOUNCE_IP: ${NODE2_IP}
      ANNOUNCE_PORT: "${redis_slave_out_port}"
      ANNOUNCE_BUS_PORT: "1${redis_slave_out_port}"
    volumes:
      - redis5-volume:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      ddc_network:
        aliases:
          - redis5
  redis6:
    image: ${REGISTRY}${redis_image}
    logging:
      driver: "json-file"
      options:
        max-size: ${CONTAINER_LOG_SIZE}
        max-file: ${CONTAINER_LOG_NUMS}
    ports:
      - target: "${redis_slave_out_port}"
        published: "${redis_slave_out_port}"
        protocol: tcp
        mode: host
      - target: "1${redis_slave_out_port}"
        published: "1${redis_slave_out_port}"
        protocol: tcp
        mode: host
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.labels.nodename==${NODE3_TAG}
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    environment:
      TZ: "Asia/Shanghai"
      PORT: "${redis_slave_out_port}"
      PASSWORD: ${redis_password}
      ANNOUNCE_IP: ${NODE3_IP}
      ANNOUNCE_PORT: "${redis_slave_out_port}"
      ANNOUNCE_BUS_PORT: "1${redis_slave_out_port}"
    volumes:
      - redis6-volume:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      ddc_network:
        aliases:
          - redis6

volumes:
  redis1-volume:
  redis2-volume:
  redis3-volume:
  redis4-volume:
  redis5-volume:
  redis6-volume:
networks:
  ddc_network:
    external: true
    name: ${NETWORK}