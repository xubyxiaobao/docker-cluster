version: '3.8'
services:
  redis1:
    image: ${REGISTRY}${redis_image}
    ports:
      - 6379:6379
    deploy:
      mode: replicated
      placement:
        constraints:
          - "node.labels.nodename==manager1"
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    environment:
      PASSWORD: ${redis_password}
    volumes:
      - redis1-volume:/data
    networks:
      ddc_network:
        aliases:
          - redis1
  redis2:
    image: ${REGISTRY}${redis_image}
    ports:
      - 6380:6379
    deploy:
      mode: replicated
      placement:
        constraints:
          - "node.labels.nodename==manager2"
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    depends_on:
      - redis1
    environment:
      PASSWORD: ${redis_password}
      SLAVEOF: "redis1 6379"
    volumes:
      - redis2-volume:/data
    networks:
      ddc_network:
        aliases:
          - redis2
  redis3:
    image: ${REGISTRY}${redis_image}
    ports:
      - 6381:6379
    deploy:
      mode: replicated
      placement:
        constraints:
          - "node.labels.nodename==manager3"
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_container_memory}
    depends_on:
      - redis1
    environment:
      PASSWORD: ${redis_password}
      SLAVEOF: "redis1 6379"
    volumes:
      - redis3-volume:/data
    networks:
      ddc_network:
        aliases:
          - redis3
  sentinel1:
    image: ${REGISTRY}${redis_image}
    deploy:
      mode: replicated
      placement:
        constraints:
          - "node.labels.nodename==manager1"
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_sentinel_container_memory}
    environment:
      PORT: 26379
      SENTINEL_MASTER: "redis1 6379 2"
      SENTINEL_AUTHPASS: ${redis_password}
    command: redis-sentinel
    depends_on:
      - redis1
      - redis2
      - redis3
    volumes:
      - sentinel1-volume:/data
    networks:
      ddc_network:
        aliases:
          - sentinel1
  sentinel2:
    image: ${REGISTRY}${redis_image}
    deploy:
      mode: replicated
      placement:
        constraints:
          - "node.labels.nodename==manager2"
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_sentinel_container_memory}
    environment:
      PORT: 26379
      SENTINEL_MASTER: "redis1 6379 2"
      SENTINEL_AUTHPASS: ${redis_password}
    command: redis-sentinel
    depends_on:
      - redis1
      - redis2
      - redis3
    volumes:
      - sentinel2-volume:/data
    networks:
      ddc_network:
        aliases:
          - sentinel2
  sentinel3:
    image: ${REGISTRY}${redis_image}
    deploy:
      mode: replicated
      placement:
        constraints:
          - "node.labels.nodename==manager3"
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 10
        window: 120s
      resources:
        limits:
          memory: ${redis_sentinel_container_memory}
    environment:
      PORT: 26379
      SENTINEL_MASTER: "redis1 6379 2"
      SENTINEL_AUTHPASS: ${redis_password}
    command: redis-sentinel
    depends_on:
      - redis1
      - redis2
      - redis3
    volumes:
      - sentinel3-volume:/data
    networks:
      ddc_network:
        aliases:
          - sentinel3


volumes:
  redis1-volume:
  redis2-volume:
  redis3-volume:
  sentinel1-volume:
  sentinel2-volume:
  sentinel3-volume:
networks:
  ddc_network:
    external: true
    name: ${NETWORK}